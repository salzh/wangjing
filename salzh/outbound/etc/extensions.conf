; ==========================================================
; make this file static and define our contexts 
; ==========================================================
[general]
static=yes
writeprotect=yes
autofallthrough=no
[local]
include => default
[default]
include => streaming
[streaming]
; ==========================================================





; ==========================================================
; stream service 
; ==========================================================
; because 0000 leg will live in a remote asterisk connected by sip,
; we cannot pass variables. in this case, we need a agi to translate
; 0000<STREAM_ID> into ${url} and start mp3player (that call zenofon specific mpg123)
;
exten => _0000.,1,NoCDR()
exten => _0000.,n,AGI(app_konference_radio.get_stream_url.pl)
exten => _0000.,n,GotoIf($[0${channel_found} = 1]?found)
exten => _0000.,n,goto(notfound)
;
exten => _0000.,n(found),NoOp(start url=${channel_stream_zurl} for channel_id=${channel_id})
exten => _0000.,n,answer()
exten => _0000.,n,mp3player(${channel_stream_zurl})
exten => _0000.,n,NoOp(url=${channel_stream_zurl} for channel_id=${channel_id} was disconnected)
exten => _0000.,n,hangup();
;
exten => _0000.,n(notfound),NoOp(channel not found)
exten => _0000.,n,hangup()

exten => _2222.,1,Answer
exten => _2222.,n,echo
exten => _2222.,n,Hangup
;
; 1111 is the local leg to connect stream sip connection to conference
;
exten => _1111,1,NoOp(connect stream to conference=${conference})
exten => _1111,n,konference(${conference},Ccl,type=stream)
exten => _1111,n,hangup()

exten => _2222,1,NoOp(connect recording to conference=${conference})
exten => _2222,n,MixMonitor(konference/${conference}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}.wav,a)
exten => _2222,n,konference(${conference},CcL,type=recording)
exten => _2222,1,NoOp(stop recording to conference=${conference})
exten => _2222,n,StopMixMonitor
exten => _2222,n,hangup()



;
; Because we create conference on the fly, we need detect if a conference already has stream connected.
; Ccl flag is used as "signature" to detect if stream is connected to conference.
; If you change this flag, system will not detect connected streams and try to connect multiple streams to one conference.
; ==========================================================





; ==========================================================
; call service
; ==========================================================
;
; ---------------------------------------
; start (clean some things)
; ---------------------------------------
exten => _X.,1,Answer()
exten => _X.,n,NoCDR()
exten => _X.,n,Playback(silence/1)
exten => _X.,n,Set(conference_name="");
exten => _X.,n,Set(conference_type="0");
exten => _X.,n,Set(dialplan_loop_count="0");
exten => _X.,n,goto(process_call)
;
; ---------------------------------------
; process_call
; ---------------------------------------
; start
exten => _X.,n(process_call),NoOp(process_call: Process call conf_name=${conference_name} )
exten => _X.,n,Set(dialplan_loop_count=$[${dialplan_loop_count} + 1]);
exten => _X.,n,GotoIf($[0${dialplan_loop_count} > 100]?process_call_hangup)
exten => _X.,n,GotoIf($[0${conference_name} > 0]?process_call_select_type)
exten => _X.,n,goto(process_call_ask_conference)
; select type
exten => _X.,n(process_call_select_type),NoOp(process_call: select type=${conference_type})
exten => _X.,n,GotoIf($[0${conference_type} = 1]?conference_type_talk_over_radio)
exten => _X.,n,GotoIf($[0${conference_type} = 2]?conference_type_private_chat)
exten => _X.,n,GotoIf($[0${conference_type} = 3]?conference_type_mute_member)
exten => _X.,n,goto(conference_type_listen)
; ask conference
exten => _X.,n(process_call_ask_conference),NoOp(process_call: Ask conference for client)
exten => _X.,n,AGI(app_konference_radio.ask_conference.pl)
exten => _X.,n,goto(process_call)
; hangup
exten => _X.,n(process_call_hangup),NoOp(process_call: call hangup)
exten => _X.,n,hangup()
;
; ---------------------------------------
; conference_type = 0 - listen
; ---------------------------------------
exten => _X.,n(conference_type_listen),NoOp(conference_type: listen radio)
exten => _X.,n,konference(${conference_name},LR${conference_data_hex},type=${conference_data})  
exten => _X.,n,goto(process_call)
;
; ---------------------------------------
; conference_type = 1 - talk_over_radio
; ---------------------------------------
exten => _X.,n(conference_type_talk_over_radio),NoOp(conference_type: listen and talk over radio)
exten => _X.,n,konference(${conference_name},R${conference_data_hex},type=${conference_data})
exten => _X.,n,goto(process_call)
;
; ---------------------------------------
; conference_type = 2 - private_chat
; ---------------------------------------
exten => _X.,n(conference_type_private_chat),NoOp(conference_type: private chat)
exten => _X.,n,konference(${conference_name}P,R${conference_data_hex},type=${conference_data})
exten => _X.,n,goto(process_call)
;
; ---------------------------------------
; conference_type = 3 - mute_member
; ---------------------------------------
exten => _X.,n(conference_type_mute_member),NoOp(conference_type: mute_member)
exten => _X.,n,AGI(app_konference_radio.mute_member.pl,${conference_name})
exten => _X.,n,Set(conference_type=0)
exten => _X.,n,goto(process_call)

; ====================================================




